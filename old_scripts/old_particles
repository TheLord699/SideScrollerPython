import pygame as pg
import random

class Particles:
    def __init__(self, game):
        self.game = game
        self.particles = []

    def generate(self, pos, velocity, color=(255, 255, 255), radius=5, lifespan=30, image=None, image_size=None, fade=False, gravity=0.0, floor_behavior=None):
        
        if floor_behavior:
            pos = self.find_valid_spawn_position(pos, radius)
            
        particle = self.create_particle(pos, velocity, color, radius, lifespan, image, image_size, fade, gravity, floor_behavior)
        self.particles.append(particle)

    def find_valid_spawn_position(self, pos, radius):
        tile_size = self.game.map.tile_dimension * self.game.map.map_scale
        tile_x = int(pos[0] // tile_size)
        tile_y = int((pos[1] + radius) // tile_size)
        
        for y_offset in range(0, 5):
            check_y = tile_y + y_offset
            for tile in self.game.map.tiles:
                if tile.get("hitbox", False) and tile["x"] == tile_x and tile["y"] == check_y:
                    ground_y = tile["y"] * tile_size
                    
                    return (pos[0], ground_y - radius)
        
        return pos

    def create_particle(self, pos, velocity, color=(255, 255, 255), radius=5, lifespan=30, image=None, image_size=None, fade=False, gravity=0.0, floor_behavior=None):
        p = {
            "pos": pg.Vector2(pos),
            "vel": pg.Vector2(velocity),
            "color": color,
            "radius": radius,
            "lifespan": lifespan,
            "age": 0,
            "image": None,
            "rect": None,
            "fade": fade,
            "gravity": gravity,
            "floor_behavior": floor_behavior
        }

        if image:
            if image_size:
                image = pg.transform.scale(image, image_size)
            p["image"] = image
            p["rect"] = image.get_rect(center=pos)
            
        else:
            p["rect"] = pg.Rect(pos[0] - radius, pos[1] - radius, radius * 2, radius * 2)

        return p

    def update(self):
        for p in self.particles[:]:
            self.update_particle(p)
            if p["age"] >= p["lifespan"]:
                self.particles.remove(p)
                
            else:
                self.render_particle(self.game.screen, p)

    def update_particle(self, p):
        p["vel"].y += p.get("gravity", 0)
        p["pos"] += p["vel"]
        p["age"] += 1

        if p["floor_behavior"]:
            self.handle_floor_collision(p)

        if p["image"]:
            p["rect"].center = p["pos"]
            
        else:
            p["rect"].topleft = (p["pos"].x - p["radius"], p["pos"].y - p["radius"])

    def handle_floor_collision(self, p):
        tile_size = self.game.map.tile_dimension * self.game.map.map_scale
        particle_bottom = p["pos"].y + p["radius"]
        particle_left = p["pos"].x - p["radius"]
        particle_right = p["pos"].x + p["radius"]
        
        start_tile_x = int(particle_left // tile_size)
        end_tile_x = int(particle_right // tile_size) + 1
        
        start_tile_y = int(particle_bottom // tile_size)
        end_tile_y = start_tile_y + 3
        
        for tile in self.game.map.tiles:
            if not tile.get("hitbox", False):
                continue
                
            tile_x = tile["x"]
            tile_y = tile["y"]
            
            if not (start_tile_x <= tile_x <= end_tile_x and 
                    start_tile_y <= tile_y <= end_tile_y):
                continue
                
            tile_top = tile_y * tile_size
            tile_left = tile_x * tile_size
            tile_right = tile_left + tile_size
            
            if (particle_right > tile_left and 
                particle_left < tile_right and 
                particle_bottom >= tile_top and 
                p["vel"].y > 0):
                
                p["pos"].y = tile_top - p["radius"]
                
                if p["floor_behavior"] == "bounce":
                    p["vel"].y *= -0.6
                    if abs(p["vel"].y) < 0.5:
                        p["vel"].y = 0
                        
                elif p["floor_behavior"] == "stop":
                    p["vel"].y = 0
                
                break

    def render_particle(self, surface, p):
        if self.game.environment.menu in {"play", "death", "pause"}:
            cam_x = self.game.player.cam_x
            cam_y = self.game.player.cam_y
            screen_pos = (p["rect"].x - cam_x, p["rect"].y - cam_y)

            if p["image"]:
                img = p["image"].copy()
                if p["fade"]:
                    alpha = max(0, 255 * (1 - p["age"] / p["lifespan"]))
                    img.set_alpha(alpha)
                surface.blit(img, screen_pos)
                
            else:
                color = p["color"]
                if p["fade"]:
                    alpha = max(0, 255 * (1 - p["age"] / p["lifespan"]))
                    color = (*color[:3], int(alpha))
                    surf = pg.Surface((p["radius"] * 2, p["radius"] * 2), pg.SRCALPHA)
                    pg.draw.rect(surf, color, surf.get_rect())
                    surface.blit(surf, screen_pos)
                    
                else:
                    pg.draw.rect(
                        surface,
                        color,
                        pg.Rect(screen_pos[0], screen_pos[1], p["radius"] * 2, p["radius"] * 2)
                    )